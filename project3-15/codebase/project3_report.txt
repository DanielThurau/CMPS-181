1. Basic information
Team number (e.g., 01) : 
#1 Submitter ID : 
#1 Student Name : 



2. Index Entry Format
- Show your index entry design (structure). 


3. Page Format
- Show your internal-page (non-leaf node) design.


- Show your leaf-page (leaf node) design.


4. Implementation Detail
- Have you added your own source file (.cc or .h)?
No additional source file was added. Classes for the interior and leaf nodes are created in the ix.h file and have their respective functions
implemented in the ix.cc file.

- Other implementation details:
IndexManager: -------------------------------------------------------------------------------------------------------

	RC createFile(const string &fileName):
		Utilizes PagedFileManager::createFile() to create a file with name fileName for the index. Creates the
		root for the index using the newLeafBasedPage() method.

	RC destroyFile(const string &fileName):
		Utilizes PagedFileManager::destroyFile() to destroy the file whose name matches fileName.

	RC openFile(const string &fileName, IXFileHandle &ixfileHandle):
		Utilizes PagedFileManager::openFile() to open the file with the provided parameters.

	RC closeFile(IXFileHandle &ixfileHandle):
		Utilizes PagedFileManager::closeFile() to close the file with the provided parameters.

	RC insertEntry(IXFileHandle &ixfileHandle, const Attribute &attribute, const void *key, const RID &rid):
		Uses the findPageWithKey() method to find the pageNum of the leafNode where the entry belongs if it
		is successfully inserted. We then use canEntryFitInLeafNode() to verify if the leafNode has the room
		to house the new entry. If it does, then we use addEntryToLeafNode() to add the entry to the LeafNode.
		If it does not, then we must split the tree to make room, so we call insertAndSplit(). At the end,
		page is freed and SUCCESS is returned.

	RC deleteEntry(IXFileHandle &ixfileHandle, const Attribute &attribute, const void *key, const RID &rid):
		We use findPageWithKey() to find the page which contains the LeafNode holding key, for which we create
		a corresponding LeafNode node. From here, we iterate through the keys vector of node and using
		compareAttributeValues(), we find the member which exactly matches key. When we find it, the key and
		corresponding rid are removed from the vector and the resultant page is written back with writeToPage().

	RC scan(IXFileHandle &ixfileHandle, const Attribute &attribute, const void *lowKey, const void *highKey,
          bool lowKeyInclusive, bool highKeyInclusive, IX_ScanIterator &ix_ScanIterator):
		Blah.

	void printBtree(IXFileHandle &ixfileHandle, const Attribute &attribute):
		Invokes printTreeRecur() with a depth and pageNum of 0 to begin printing from the root with surrounding
		brackets. More relevant detail in the description for printTreeRecur().

	void printTreeRecur(IXFileHandle &ixfileHandle, const Attribute &attribute, PageNum pageNum, int depth):
		Uses getNodeType() to differentiate the node contained in the pageNum passed in. If it is a leafNode,
		a node is created from the information on the page and is then used to invoke printLeafNode() with an
		incremented level of depth. Similarly if the provided pageNum corresponds to an interiorNode, a node
		is created from the information on the page and is used to invoke printInteriorNode() with an
		incremented level of depth.

	void printInteriorNode(IXFileHandle &ixfileHandle, const Attribute &attribute, InteriorNode &node, int depth):
		Prints the vecotr of trafficCops contained in the interiorNode and subsequently invokes printTreeRecur()
		again for each of the members of the node's pagePointer vector.

	void printLeafNode(IXFileHandle &ixfileHandle, const Attribute &attribute, LeafNode &node, int depth):
		Prints the keys for all members of the node's keys vector using printKey(). Following this, each rid in
		the rid vector of the node is used to print the corresponding pageNum and slotNum.

	void printKey(void *key, const Attribute &attribute):
		Prints the key passed in through a switch statement based on its attribute's type: TypeInt, TypeReal,
		or TypeVarChar.

	void newLeafBasedPage(void *page, int32_t leftSibling, int32_t rightSibling, PageNum parent):
		Sets up a new leaf-based page using the page parameter. An IndexDirectory is created to have 
		numEntries = 0, a freeSpaceOffset set to the space immediately following an indexDirectory and 
		FamilyDirectory, and the IndexDirectory type is set to LEAF_NODE. A FamilyDirectory is created for the
		new page, using the leftSibling, rightSibling, and parent parameters for the properties which share their
		corresponding names. setIndexDirectory() and setFamilyDirectory() are then used to set the new respective
		directories for the new leaf page.

	void newInteriorBasedPage(void *page, int32_t leftSibling, int32_t rightSibling, PageNum parent):
		Sets up a new leaf-based page using the page parameter. An IndexDirectory is created to have 
		numEntries = 0, a freeSpaceOffset set to the space immediately following an indexDirectory and the
		IndexDirectory type is set to INTERIOR_NODE. A FamilyDirectory is created for the new page, using the
		leftSibling, rightSibling, and parent parameters for the properties which share their corresponding names.
		setIndexDirectory() and setFamilyDirectory() are then used to set the new respective directories for the
		new interior page.

	void setIndexDirectory(void *page, IndexDirectory &directory):
		Uses memset() to copy the contents of directory into the supplied page.

	void getIndexDirectory(const void *page, IndexDirectory &directory):
		Uses memset() to copy the contents of page into the supplied directory.

	NodeType getNodeType(const void *page):
		Uses getIndexDirectory() to obtain the directory of page. Once obtained, they type for the directory is
		returned.

	int compareAttributeValues(const void *key_1, const void *key_2, const Attribute &attribute):
		Performs a comparison with a switch statement based on the type of the attribute. Returns negative if key_1
		comes before key_2, 0 if key_1 equals key_2, and positive if key_1 comes after key_2.

	void findPageWithKey(IXFileHandle &ixfileHandle, const void *key, const Attribute &attribute, void *page,
	  PageNum &pageNum):
		Uses readPage() on ixfileHandle to read the contents at pageNum into page. Using getNodeType() to indicate
		whether or not the page is found, the interiorNodes are traversed accordingly using compareAttributeValues()
		to indicate the direction of the next traversal. At the end of every traversal, the resultant node is read
		into page, eventually leading to the leafNode containing key.

	bool canEntryFitInLeafNode(LeafNode node, const void *key, const Attribute &attribute):
		The key is run through a switch statement to determine a value key_size based on the attribute's type. A truth
		value is returned on whether or not there is sufficient space in the node based on its freeSpaceOffset,
		key_size, and the size of an RID.

	bool canEntryFitInInteriorNode(InteriorNode node, const void *key, const Attribute &attribute):
		The key is run through a switch statement to determine a value key_size based on the attribute's type. A truth
		value is returned on whether or not there is sufficient space in the node based on its freeSpaceOffset,
		key_size, and the size of an RID. It is exactly the same as canEntryFitInLeafNode() except for InteriorNode.

	void addEntryToLeafNode(LeafNode &node, const void *key, const RID rid, const Attribute &attribute):
		Adds the provided key and RID into LeafNode node. The key is copied into a duplicate key_cpy. The index to
		insert the entry into is found using a lambda function, returning an iterator. The point where the iterator
		resides is then used to add the new trafficCop and add the new pagePointer to node. The freeSpaceOffset is
		updated accordingly and numEntries for node is incremented.

	void addEntryToInteriorNode(IXFileHandle &ixfileHandle, InteriorNode &node, const void *key,
	  const Attribute &attribute):
		Adds the provided key and RID into InteriorNode node. The index to insert the entry into is found using a lambda
		function, returning an iterator. The point where the iterator resides is then used to add the new trafficCop
		and add the new pagePointer to node. The freeSpaceOffset is updated accordingly and numEntries for node is
		incremented.

	void setFamilyDirectory(void *page, FamilyDirectory &directory):
		Uses memset() to copy the contents of directory into the supplied page.

	void getFamilyDirectory(const void *page, FamilyDirectory &directory):
		Uses memset() to copy the contents of page into the supplied directory.

	RC insertAndSplit(IXFileHandle &ixfileHandle, const Attribute &attribute, const void *key, const RID rid,
	  void *page, PageNum &pageNum):
		This method has two courses of action based on the node that the page parameter represents.
			If this page represents a leafNode, we use addEntryToLeafNode() to add the key and rid to the
		corresponding leafNode, whether it will overflow the free space offset (FSO) or not; the overflow does
		not matter since we know we will be splitting this vector in half. From there, we call splitLeafNode()
		to split the leafNode and obtain the key which will be passed into the leafNode's parent, an interiorNode.
		From here, the obtained key is passed into the parent node and insertAndSplit() is called recursively in
		order to "bubble up" any further necessary splits.
			If page contains an InteriorNode, we create a corresponding InteriorNode node and then use
		canEntryFitInInteriorNode() to see if we are able to fit the new key in. If we can, we add it using
		addEntryToInteriorNode() and the simplest case is accomplished. If it does not fit, then we call the
		function splitInteriorNode() to split the InteriorNode and obtain the key that will be passed up to node's
		parent. InsertAndSplit() is then called recursively in order to "bubble up" any further necessary splits.

	void* splitLeafNode(IXFileHandle &ixfileHandle, LeafNode &originLeaf, LeafNode &newLeaf,
	  const Attribute &attribute):
		This function creates a new LeafNode from newLeaf. If originLeaf is the root, then we set its selfPageNum
		to the number of pages in the fileHandle and the newLeaf's to one more than that; otherwise, we set newLeaf's
		selfPageNum to the number of pages in the fileHandle. The function then sets newLeaf's leftSibling to the
		originLeaf, newLeaf's rightSibling to originLeaf's rightSibling, and sets newLeaf's parent to originLeaf's
		parent; this essentially puts a new LeafNode nestled right between the original leaf and its right sibling.
		newLeaf takes the left "half" of originLeaf's keys vector (and the extra key if the vector had an odd number
		of keys) and those same keys are removed from originLeaf's keys vector. The split values are then erased from
		the originLeaf. calculateFreeSpace() is then run on both newLeaf and originLeaf to set their respective FSO's
		to their updated values. The new originLeaf is written back to the page. If originLeaf was the root, we use
		appendPage() to append the page containing originLeaf to the fileHandle to ixFileHandle. If it was not the
		root, then writePage() is used to write the page containing originLeaf to the selfPageNum. newLeaf is written
		back to its pages and the "trafficCop" emerging from the split is returned.

	void* splitInteriorNode(IXFileHandle &ixfileHandle, InteriorNode &originNode, InteriorNode &newNode,
	  const Attribute &attribute):
		This function creates a new InteriorNode from newNode. If originNode is the root, then we set its selfPageNum
		to the number of pages in the fileHandle and the newNode's to one more than that; otherwise, we set newLeaf's
		selfPageNum to the number of pages in the fileHandle. The function then sets newNode's leftSibling to the
		originNode, newNode's rightSibling to originNode's rightSibling, and sets newNode's parent to originNode's
		parent; this essentially puts a new InteriorNode nestled right between the original InteriorNode and its right
		sibling. newNode takes the left "half" of originNode's keys vector (and the extra key if the vector had an odd
		number of keys) and those same keys are removed from originNode's keys vector. The split values are then erased
		from the originNode. calculateFreeSpace() is then run on both newNode and originNode to set their respective
		FSO's to their updated values. The new originNode is written back to the page. If originNode was the root, we
		use appendPage() to append the page containing originNode to the fileHandle to ixFileHandle. If it was not the
		root, then writePage() is used to write the page containing originNode to the selfPageNum. newNode is written
		back to its pages and the "trafficCop" emerging from the split is returned.

	uint32_t calculateFreeSpaceOffset(LeafNode &node, const Attribute &attribute):
		The new FSO of node is calculated based on the attribute's type. The new FSO is returned. The same exact
		functionality exists for this function's namesake for InteriorNode.

	

IXFileHandle: -------------------------------------------------------------------------------------------------------

	RC getNextEntry(RID &rid, void *key):
		Blah.

	RC close():
		Blah.

	RC collectCounterValues(unsigned &readPageCount, unsigned &writePageCount, unsigned &appendPageCount):
		Sets readPageCount to the ixReadPageCounter of the IXFileHandle, writePageCount to the ixWritePageCounter,
		and appendPageCount to the ixAppendPageCounter.

	RC readPage(PageNum pageNum, void *data):
		Uses readPage() for the fileHandle to read the contents of the page at pageNum into data.

	RC writePage(PageNum pageNum, const void *data):
		Uses writePage() for the fileHandle to write data into the page at pageNum.

	RC appendPage(const void *data):
		Uses appendPage() for the fileHandle to append data.

	unsigned getNumberOfPages():
		Returns the result of getNumberOfPages() for the fileHandle.

InteriorNode: -------------------------------------------------------------------------------------------------------

	selfPageNum:
		The page which the InteriorNode resides on in the fileHandle.

	indexDirectory:
		The IndexDirectory containing the number of entries, the freeSpaceOffset for the InteriorNode's page,
		and the node's type (INTERIOR_NODE).

	familyDirectory:
		The FamilyDirectory containing the node's leftSibling, rightSibling, and parent nodes.

	trafficCops:
		A vector of all "traffic cops" in the interiorNode: values which determine the placement of new entries
		and guides the traversal of the B+ tree.

	pagePointers:
		A vector of all page pointers in the interiorNode: these are pointers to the pages containing keys which
		are bounded by the values of the "surrounding" traffic cops.

	RC writeToPage(void *page, const Attribute &attribute):
		Creates an IndexManager instance im to run setIndexDirectory() and setFamilyDirectory() for page. A pointer
		is created immediately after the indexDirectory and familyDirectory. All members of the node's pagepointers
		vector are then written to the page with memcpy(). Next, all members of the node's trafficCops vector are
		written to the page based on the attribute's type.

LeafNode: -----------------------------------------------------------------------------------------------------------

	selfPageNum:
		The page which the LeafNode resides on in the fileHandle.

	indexDirectory:
		The IndexDirectory containing the number of entries, the freeSpaceOffset for the LeafNode's page, and the
		node's type (LEAF_NODE).

	familyDirectory:
		The FamilyDirectory containing the node's leftSibling, rightSibling, and parent nodes.

	keys:
		A vector of all key values contained in the node. This is kept dorted at all times.

	rids:
		A vector of all RIDs corresponding to the key values contained in the node.

	writeToPage():
		Creates an IndexManager instance im to run setIndexDirectory() and setFamilyDirectory() for page. A pointer
		is created immediately after the indexDirectory and familyDirectory. Next, all members of the node's keys
		vector are written to the page based on the attribute's type. Lastly, all members of the node's rids vector
		are written to the page.

5. Other (optional)
- Freely use this section to tell us about things that are related to the project 3, but not related to the other sections (optional).  For example, if you chose to do the extra credit (non-lazy deletion), please tell us here what you did.

