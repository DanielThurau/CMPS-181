1. Basic information
Team number (e.g., 01) : 15
#1 Student ID : 
#1 Student Name : Morgan Grant
#2 Student ID : +
#2 Student Name : Daniel Thurau
#3 Student ID : 1411983
#3 Student Name : Preston Fraser


2. Catalog information about Index
- Show what catalog information you store for an index. 


3. Index Nested Loop Join
- Describe how your Index Nested Loop Join works.


4. Implementation Detail
- Have you added your own source file (.cc or .h)?

	We did not provide any new files for our implementation.

- Have you implemented any optional features? Then, describe them here.

	As part of our implementation for the INLJoin iterator, we created a new
	iterator class CartProd (short for "Cartesian Product"), which was
	basically leveraged for its getNextTuple() function. CartProd assumes all
	of the same fields as the INLJoin iterator that calls it in its constructor
	except for the Condition, which it does not need to use.

    Iterator *leftIn:		    	The "outer" table of the join. 
    IndexScan *rightIn:				The "inner" table of the join.
    vector<Attribute> leftAttrs:	The 
    vector<Attribute> rightAttrs;
    unsigned leftInputTupleSize;
    unsigned rightInputTupleSize;

	RC CartProd::getNextTuple(void *data):
		This function 

- Other implementation details:


5. Other (optional)
- Freely use this section to tell us about things that are related to the project 4, but not related to the other sections (optional)

