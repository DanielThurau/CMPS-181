1. Basic information
Team number : 15
#1 Submitter ID : 1403225
#1 Submitter Name : Morgan Grant



2. Meta-data
- Show your meta-data design (Tables and Columns table) and information about each column.

	

3. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that your team hasn't implemented this feature.

	Call F the number of fields in the record. The record starts with ceil(F / 8) bytes for a null field indicator. There are then F * 2 bytes for the field
	directory. Each 2 bytes forms an unsigned 16-bit integer that gives the offset of the end of each field from the start of the fields in the record. After
	this field directory is all of the field data.
		To access the k’th field in the record, you would first get the k’th and the k-1’th entry in the field directory. The k-1’th entry gives you the start
	of the field, and the difference between the k and k-1’th entries gives the length of the field. Use the start and the length to retrieve the field from the
	record. Since accessing the k’th field does not depend on knowing anything about any of the previous fields, field access is O(1).

- Describe how you store a VarChar field.

	We store a VarChar field in two components, as specified: 4 bytes to store the length of the characters, then the list of characters stored.

- Describe how you deal with an update and delete.

	For updates, we have two main cases: the record stays in the same page, and record does not stay in the same page. If the record stays in the same page, the
	record is overwritten by its updated version after the records that follow it have been moved and their offsets updated. If the record is not staying on the
	same page, the record is removed from the page and its slot for the page is emptied. The new record is placed into a page that it will fit into. Back in the
	original page, a forwarding address to the new RID is left at the old RID. If the RID in the old page already contained a forwarding address, it is overwritten
	by the new address

	For deletes, the slot entry for the record is emptied and then the record is overwritten by the records that follow it as they are moved back, starting at its
	offset. If the record being deleted is the last record in the page, then the free space offset is set to the deleted record's offset.

4. Page Format
- Show your page format design.

	Our page format uses the slot directory method. Starting from the end of the page (byte 4096) we have 4 bytes (4092-4095) to be cast to an unsigned integer
	representing the number of slots used in the page. The next 4 bytes (4088-4091) are to be cast to unsigned integer that is an offset from the beginning of the
	page to the start of free space (by our definition free space ranges from that offset to the end of the slot directory).  Whenever a new record needed to be
	added (determined by our rbfm algorithm) the page is created to contain 4096 bytes, with these values initialized to zero.
		The slot directory then has an additional N * 8 byte entries that store information about the slots inside the page (where N is the number of slots
	tracked by the integer at bytes 4092-4096. Each of these entries are split into two four bytes integers that represent the start of the slot (offset from
	start of page) and length of slot. These slots are what the records are stored in.
		When a record is inserted, we cycle through existing pages to find one with enough free space to store the record; if none are found, we create a new page.
	Once the page is selected, we check to see if there is any existing free slots in the page we are inserting the record, otherwise make a new one. In the chosen
	slot, we insert a reference to the new record in the slot directory, update the slot header, and lastly insert the record. The changes are written back to the
	page and the insert is complete.

- Describe how you deal with an update and delete.

	For updates, we first consider whether or not there is sufficient space in the record's current page to accommodate the update. If the change in size
	exceeds the available free space in the record's current page, then we just use insertRecord() to add the new updated record, which implicitly finds the best
	page that can fit it. After inserting, we delete the original record and leave a forwarding address to the new RID in its place. If the record in question
	was already a forwarding address, then we replace it with the new one.
		Alternatively, if the change in size of the page is less than the amount of available free space, we move all records that come after it in the page,
	then rewrite the offsets in the slot directory accordingly. After that, it updates the record in question and updates the free space offset by the change
	in size of the page.
		Once the record is fully updated, we write it back to the page.

	For deletes, we call a separate function removeRecordFromPage(), which is separate since its functionality is utilized in multiple other functions for the
	RBFM such as updateRecord(). In removeRecordFromPage(), we empty out and delete the slot entry which corresponds to the record to be deleted. The record is
	then deleted by overwriting it with the successive records and increasing the free space offset by the size of the deleted record.
		Once the record is deleted, we write the changes back to the page.

5. File Format
- Show your file format design

	

6. Implementation Detail
- Other implementation details goes here.

	RBFM_ScanIterator Implementation ==========================================================================================

	bool (*compFunc)(void *, CompOp, void *):
		This boolean adopts the elements of the "filter" condition introduced with the RBFM::scan() function and is used to
		test whether the current record abides by it or not.

	RID curRid: The current RID this scanner is pointing at.

	RC updateCurRid():
		This function advances the RID forward (as it is used in getNextRecord()). It accommodates the three cases: next record
		is on the current page, next record is on the next page, and there is no next record.

	RC projectAttributes(void *data):
		This function projects the attributes in the attributeNames vector from the record pointed to by curRid into data.

	RBFM Functions we added ===================================================================================================

	int getEmptySlotDirectoryEntry(void *page):
		This function returns the index of the first empty slot in a page and returns -1 if there are none.

	bool canRecordFitInPage(void * page, unsigned recordLength):
		This function checks to see if a record of length recordLength can fit in a page and also includes a check to see if a new slot directory entry needs
		to be added.

	RID followForwardingAddress(FileHandle fileHandle, RID startRid):
		This function follows the forwarding address at the provided RID and returns the RID containing the actual data in the other page.

	RID deleteForwardingAddress(FileHandle fileHandle, RID startRid):
		This function deletes the forwarding address associated with a record and returns the RID containing the actual data.
	
	void deleteSlotDirectoryEntry(void *page, unsigned slotNum):
		This function deletes the specified entry from a slot directory.

	void removeRecordFromPage(void *page, unsigned slotNum):
		As mentioned previously, this function empties out the provided slot entry and moves all of the following records back by the length of the deleted
		record, updating their offset accordingly. Lastly, it updates the free space offset by increasing it by the length of the deleted record.

	unsigned attributeOffsetFromIndex(void *record, unsigned index, const vector<Attribute> &recordDescriptor):
		This function sets the offset for an attribute based on the attribute type in a switch statement.

	RM_ScanIterator Implementation ============================================================================================

		

	RM Functions we added =====================================================================================================

	void createTableDescriptor(vector<Attribute> &tableDescriptor):
		This function...

	void createColumnDescriptor(vector<Attribute> &columnDescriptor):
		This function...

	void prepareTables(int table_id, const string &table_name, const string &file_name, void *buffer, vector<Attribute> &tableDescriptor):
		This function...

	void prepareColumns(int table_id, const string &column_name, int column_type, int column_length, int column_position, void *buffer,
							vector<Attribute> &tableDescriptor);
		This function...

	RC createCatalogColumns():
		This function...	

	RC createCatalogTables():
		This function...

	vector<Attribute> assembleAttributes(unsigned tableID):
		This function...

	int columnEntry(void *columnRecord, Attribute &entry, vector<string> projectionAttributes);
		This function...

	int getActualByteForNullsIndicator(int fieldCount);
		This function...

	RC getTableIDAndFilename (const string tableName, string &filename, unsigned &tableId);
		This function...

7. Other (optional)
- Freely use this section to tell us about things that are related to the project 2, but not related to the other sections (optional)

